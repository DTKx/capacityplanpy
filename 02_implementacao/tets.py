# import copy
# class FooInd():
#     def __init__(self):
#         self.a=1

# class Planning():
#     def foo(self,pop):
#         print(pop.a)

#     def main():
#         ind=FooInd()
#         print(ind.a)
#         Planning().foo(copy.deepcopy(ind))
# if __name__ == "__main__":
#     Planning.main()

import numpy as np
from functools import partial
# from collections import defaultdict
# from dateutil import relativedelta
# import datetime
from numba import cuda

# a=defaultdict(partial)

# b=np.zeros(shape=(1,2))
# c=np.ones(shape=(1,2))
# a[0]=(b,c)

# print("d")
# # d1=datetime.datetime(2018,10,5)
# # d2=datetime.datetime(2019,11,6)

# # r = relativedelta.relativedelta(d2, d1)
# # print(r.months)

# # print(12*r.years)

# @cuda.jit
# def increment_a_2D_array(an_array):
#     x, y = cuda.grid(2)
#     if x < an_array.shape[0] and y < an_array.shape[1]:
#        an_array[x, y] += 1

# increment_a_2D_array(np.ones(shape=(5,2)))

        demand_distribution=np.array([[(0.0) ,(0.0) ,(0.0) ,(0.0)],
        [(0.0),(0.0),(0.0) ,(4.5, 5.5, 8.25) ],
        [(2.1, 3.1, 4.65) ,(0.0),(0.0) ,(4.5, 5.5, 8.25)],
        [(0.0),(0.0) ,(0.0) ,(0.0)],
        [(0.0),(0.0) ,(0.0) ,(4.5, 5.5, 8.25) ],
        [(2.1, 3.1, 4.65) ,(0.0) ,(0.0),(4.5, 5.5, 8.25) ],
        [(0.0),(0.0) ,(3.9, 4.9, 7.35) ,(4.5, 5.5, 8.25) ],
        [(2.1, 3.1, 4.65) ,(0.0) ,(3.9, 4.9, 7.35),(4.5, 5.5, 8.25) ],
        [(2.1, 3.1, 4.65) ,(0.0) ,(0.0) ,(4.5, 5.5, 8.25)],
        [(2.1, 3.1, 4.65),(0.0) ,(0.0) ,(0.0)],
        [(0.0),(0.0) ,(0.0),(10, 11, 16.5) ],
        [(5.2, 6.2, 9.3) ,(0.0) ,(8.8, 9.8, 14.7) ,(4.5, 5.5, 8.25)],
        [(5.2, 6.2, 9.3) ,(0.0) ,(3.9, 4.9, 7.35),(0.0)],
        [(2.1, 3.1, 4.65) ,(0.0) ,(0.0),(4.5, 5.5, 8.25) ],
        [(5.2, 6.2, 9.3),(0.0) ,(3.9, 4.9, 7.35) ,(4.5, 5.5, 8.25) ],
        [(0.0),(0.0) ,(0.0),(10, 11, 16.5) ],
        [(2.1, 3.1, 4.65) ,(0.0) ,(0.0),(4.5, 5.5, 8.25) ],
        [(8.3, 9.3, 13.95),(0.0) ,(3.9, 4.9, 7.35) ,(4.5, 5.5, 8.25)],
        [(0.0),(0.0) ,(8.8, 9.8, 14.7),(0.0)],
        [(5.2, 6.2, 9.3) ,(0.0) ,(0.0) ,(4.5, 5.5, 8.25) ],
        [(5.2, 6.2, 9.3),(0.0) ,(0.0) ,(4.5, 5.5, 8.25) ],
        [(0.0),(0.0),(0.0),(4.5, 5.5, 8.25) ],
        [(5.2, 6.2, 9.3) ,(5.2, 6.2, 9.3) ,(3.9, 4.9, 7.35) ,(10, 11, 16.5) ],
        [(8.3, 9.3, 13.95),(0.0),(3.9, 4.9, 7.35),(4.5, 5.5, 8.25)],
        [(0.0),(0.0) ,(0.0),(0.0)],
        [(8.3, 9.3, 13.95) ,(0.0) ,(8.8, 9.8, 14.7) ,(10, 11, 16.5) ],
        [(5.2, 6.2, 9.3) ,(0.0) ,(0.0),(0.0)],
        [(2.1, 3.1, 4.65) ,(0.0),(0.0),(10, 11, 16.5) ],
        [(5.2, 6.2, 9.3) ,(5.2, 6.2, 9.3) ,(3.9, 4.9, 7.35) ,(4.5, 5.5, 8.25) ],
        [(2.1, 3.1, 4.65),(0.0),(8.8, 9.8, 14.7) ,(4.5, 5.5, 8.25)],
        [(0.0),(0.0) ,(8.8, 9.8, 14.7),(0.0)],
        [(8.3, 9.3, 13.95) ,(0.0) ,(0.0),(10, 11, 16.5) ],
        [(5.2, 6.2, 9.3) ,(0.0) ,(3.9, 4.9, 7.35) ,(10, 11, 16.5)],
        [(8.3, 9.3, 13.95) ,(0.0) ,(8.8, 9.8, 14.7) ,(0.0)],
        [(5.2, 6.2, 9.3),(0.0),(3.9, 4.9, 7.35),(4.5, 5.5, 8.25) ],
        [(0.0),(5.2, 6.2, 9.3) ,(0.0),(4.5, 5.5, 8.25)]])


print("h")
monte=np.median(np.random.triangular(a[1,3][0],a[1,3][1],a[1,3][2],size=500))
